// File: mobile/lib/main.dart
// (‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏ß‡∏¥‡∏ä‡∏≤ (Subject Selection) ‡∏Å‡πà‡∏≠‡∏ô Check-in)
// (‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ Server ‡∏à‡∏∞‡∏Å‡∏£‡∏≠‡∏á‡∏ß‡∏¥‡∏ä‡∏≤‡∏°‡∏≤‡πÉ‡∏´‡πâ‡πÄ‡∏≠‡∏á)

import 'dart:convert';
import 'dart:io';
import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
// import 'package:image_picker/image_picker.dart'; // ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß
import 'package:geolocator/geolocator.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:mobile/RegisterFacePage.dart';
import 'dart:async'; 

import 'package:camera/camera.dart'; 
import 'package:mobile/CheckInCameraPage.dart'; 

// ‚≠êÔ∏è URL ‡∏Ç‡∏≠‡∏á API Service (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
// const String apiUrl = 'http://10.0.2.2:8000'; // For Android Emulator
const String apiUrl = 'http://192.168.1.37:8000'; // üëà ** ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç IP ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ!! ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô IP ‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì **

void main() {
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Face Attendance',
      theme: ThemeData(primarySwatch: Colors.blue),
      home: const AuthWrapper(),
    );
  }
}

// AuthWrapper (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
class AuthWrapper extends StatefulWidget {
  const AuthWrapper({super.key});
  @override
  State<AuthWrapper> createState() => _AuthWrapperState();
}
class _AuthWrapperState extends State<AuthWrapper> {
  String? _token; String? _username; String? _fullName; bool _isFaceRegistered = false;
  @override void initState() { super.initState(); _checkLoginStatus(); }
  Future<void> _checkLoginStatus() async {
    final prefs = await SharedPreferences.getInstance();
    if (!mounted) return;
    setState(() { _token = prefs.getString('user_token'); _username = prefs.getString('username'); _fullName = prefs.getString('full_name'); _isFaceRegistered = prefs.getBool('isFaceRegistered') ?? false; });
  }
  void _onLoginSuccess(String token, String username, String fullName, bool isFaceRegistered) async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setString('user_token', token); await prefs.setString('username', username); await prefs.setString('full_name', fullName); await prefs.setBool('isFaceRegistered', isFaceRegistered);
    if (!mounted) return; setState(() { _token = token; _username = username; _fullName = fullName; _isFaceRegistered = isFaceRegistered; });
  }
  void _onFaceRegistrationSuccess() async {
    final prefs = await SharedPreferences.getInstance(); await prefs.setBool('isFaceRegistered', true);
    if (!mounted) return; setState(() { _isFaceRegistered = true; });
  }
  void _onLogout() async {
    final prefs = await SharedPreferences.getInstance(); await prefs.clear();
    if (!mounted) return; setState(() { _token = null; _username = null; _fullName = null; _isFaceRegistered = false; });
  }
  @override Widget build(BuildContext context) {
    if (_token == null) { return LoginPage(onLoginSuccess: _onLoginSuccess); }
    else if (!_isFaceRegistered) { return RegisterFacePage( token: _token!, fullName: _fullName ?? "User", onRegistrationSuccess: _onFaceRegistrationSuccess, ); }
    else { 
      // ‚≠êÔ∏è ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô CheckInPage ‡πÄ‡∏õ‡πá‡∏ô SubjectSelectionPage (‡∏ã‡∏∂‡πà‡∏á‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç CheckInPage ‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πâ)
      return SubjectSelectionPage( token: _token!, username: _username ?? "user", fullName: _fullName ?? "User", onLogout: _onLogout, ); 
    }
  }
}

// LoginPage (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
class LoginPage extends StatefulWidget {
  final Function(String token, String username, String fullName, bool isFaceRegistered) onLoginSuccess;
  const LoginPage({super.key, required this.onLoginSuccess});
  @override State<LoginPage> createState() => _LoginPageState();
}
class _LoginPageState extends State<LoginPage> {
  final TextEditingController _usernameController = TextEditingController(); final TextEditingController _passwordController = TextEditingController(); String _message = ''; bool _isLoading = false;
  Future<void> _login() async { if (!mounted) return; setState(() { _isLoading = true; _message = ''; }); try {
      final response = await http.post( Uri.parse('$apiUrl/login'), headers: {'Content-Type': 'application/json'}, body: jsonEncode({ 'username': _usernameController.text, 'password': _passwordController.text, }), ).timeout(const Duration(seconds: 15));
      if (!mounted) return; if (response.statusCode == 200) { final data = jsonDecode(response.body); final bool isFaceRegistered = data['user']?['isFaceRegistered'] ?? false; final String fullName = data['user']?['fullName'] ?? _usernameController.text; widget.onLoginSuccess( data['token'], _usernameController.text, fullName, isFaceRegistered, ); }
      else { final errorBody = jsonDecode(response.body); setState(() { _message = 'Login failed: ${errorBody['error'] ?? 'Status code ${response.statusCode}'}'; }); }
    } on TimeoutException { if (mounted) { setState(() { _message = 'Login failed: Connection timed out.'; _isLoading = false; }); } }
    catch (e) { if (mounted) { setState(() { _message = 'Login failed: ${e.toString()}'; _isLoading = false; }); } }
    finally { if (mounted && _isLoading) { setState(() { _isLoading = false; }); } }
  }
  @override Widget build(BuildContext context) { return Scaffold( appBar: AppBar(title: const Text('User Login')), body: Padding( padding: const EdgeInsets.all(16.0), child: Column( mainAxisAlignment: MainAxisAlignment.center, children: [ TextField( controller: _usernameController, decoration: const InputDecoration(labelText: 'Username'), keyboardType: TextInputType.text, autocorrect: false, ), TextField( controller: _passwordController, decoration: const InputDecoration(labelText: 'Password'), obscureText: true, keyboardType: TextInputType.visiblePassword, autocorrect: false, ), const SizedBox(height: 20), _isLoading ? const CircularProgressIndicator() : ElevatedButton( onPressed: _login, child: const Text('Login'), ), const SizedBox(height: 10), if (_message.isNotEmpty) Text(_message, style: const TextStyle(color: Colors.red)), ], ), ), ); }
}


// ‚≠êÔ∏è‚≠êÔ∏è [CLASS ‡πÉ‡∏´‡∏°‡πà] ‡∏™‡∏£‡πâ‡∏≤‡∏á Model ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Subject ‚≠êÔ∏è‚≠êÔ∏è
class Subject {
  final int id;
  final String code;
  final String name;
  final String? description;

  Subject({
    required this.id,
    required this.code,
    required this.name,
    this.description,
  });

  factory Subject.fromJson(Map<String, dynamic> json) {
    return Subject(
      id: json['subject_id'],
      code: json['code'],
      name: json['name'],
      description: json['description'],
    );
  }
}


// ‚≠êÔ∏è‚≠êÔ∏è [‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠ CheckInPage ‡πÄ‡∏õ‡πá‡∏ô SubjectSelectionPage ‚≠êÔ∏è‚≠êÔ∏è
// ‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á State ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
class SubjectSelectionPage extends StatefulWidget {
  final String token; 
  final String username; 
  final String fullName; 
  final VoidCallback onLogout;
  
  const SubjectSelectionPage({ 
    super.key, 
    required this.token, 
    required this.username, 
    required this.fullName, 
    required this.onLogout, 
  });

  @override 
  State<SubjectSelectionPage> createState() => _SubjectSelectionPageState();
}

class _SubjectSelectionPageState extends State<SubjectSelectionPage> {
  
  // --- ‚≠êÔ∏è State ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏¥‡∏ä‡∏≤ ‚≠êÔ∏è ---
  List<Subject> _subjects = [];
  Subject? _selectedSubject; // ‡∏ß‡∏¥‡∏ä‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
  bool _isLoadingSubjects = true;
  String? _subjectErrorMessage;

  // --- ‚≠êÔ∏è State ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏¥‡∏ô (‡∏¢‡πâ‡∏≤‡∏¢‡∏°‡∏≤‡∏à‡∏≤‡∏Å CheckInPage ‡πÄ‡∏î‡∏¥‡∏°) ‚≠êÔ∏è ---
  bool _isCheckingIn = false; 
  File? _imageFile; 
  String _statusMessage = 'Please verify your location first'; // ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
  bool _isVerifyingLocation = false; // ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á?
  bool? _isInGeofence; // ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á (null=‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡πá‡∏Ñ, true=‡∏≠‡∏¢‡∏π‡πà, false=‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏π‡πà)
  Position? _currentPosition; // ‡πÄ‡∏Å‡πá‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡πà‡∏≤‡∏ô

  @override
  void initState() {
    super.initState();
    _fetchSubjects(); // ‚≠êÔ∏è ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏ß‡∏¥‡∏ä‡∏≤
  }

  // --- ‚≠êÔ∏è [‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà] ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ß‡∏¥‡∏ä‡∏≤‡∏à‡∏≤‡∏Å API /courses ‚≠êÔ∏è ---
  // (‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏Å‡πâ Server ‡∏à‡∏∞‡∏Å‡∏£‡∏≠‡∏á‡∏ß‡∏¥‡∏ä‡∏≤‡∏ó‡∏µ‡πà user ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÑ‡∏ß‡πâ‡∏°‡∏≤‡πÉ‡∏´‡πâ‡πÄ‡∏≠‡∏á)
  Future<void> _fetchSubjects() async {
    if (!mounted) return;
    setState(() {
      _isLoadingSubjects = true;
      _subjectErrorMessage = null;
    });

    try {
      final response = await http.get(
        Uri.parse('$apiUrl/courses'), // ‚≠êÔ∏è ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API /courses
        headers: { 'Authorization': 'Bearer ${widget.token}', },
      ).timeout(const Duration(seconds: 15));

      if (!mounted) return;

      if (response.statusCode == 200) {
        final List<dynamic> data = jsonDecode(response.body);
        setState(() {
          _subjects = data.map((json) => Subject.fromJson(json)).toList();
          _isLoadingSubjects = false;
        });
      } else {
        final errorMsg = jsonDecode(response.body)['error'] ?? 'Server error ${response.statusCode}';
        setState(() {
          _subjectErrorMessage = '‚ùå Failed to load subjects: $errorMsg';
          _isLoadingSubjects = false;
        });
      }
    } on TimeoutException {
      if (mounted) {
        setState(() {
          _subjectErrorMessage = '‚ùå Failed to load subjects: Request timed out.';
          _isLoadingSubjects = false;
        });
      }
    } catch (e) {
      if (mounted) {
        setState(() {
          _subjectErrorMessage = '‚ùå Error loading subjects: ${e.toString()}';
          _isLoadingSubjects = false;
        });
      }
    }
  }

  // --- ‚≠êÔ∏è [‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà] ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏¥‡∏ä‡∏≤ ‚≠êÔ∏è ---
  void _onSubjectSelected(Subject subject) {
    setState(() {
      _selectedSubject = subject;
      // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏¥‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏¥‡∏ä‡∏≤‡πÉ‡∏´‡∏°‡πà
      _statusMessage = 'Please verify location for "${subject.name}"';
      _isInGeofence = null;
      _currentPosition = null;
      _imageFile = null;
      _isCheckingIn = false;
      _isVerifyingLocation = false;
    });
  }

  // --- ‚≠êÔ∏è [‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà] ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏¥‡∏ä‡∏≤ ‚≠êÔ∏è ---
  void _resetToSubjectSelection() {
    setState(() {
      _selectedSubject = null;
      _isInGeofence = null;
      _currentPosition = null;
      _imageFile = null;
      _statusMessage = 'Please verify your location first';
      _isCheckingIn = false;
      _isVerifyingLocation = false;
      
      // ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡πÇ‡∏´‡∏•‡∏î‡∏ß‡∏¥‡∏ä‡∏≤‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
      // _fetchSubjects(); 
    });
  }


  // --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°) ---
  Future<Position?> _getCurrentLocation() async {
    bool serviceEnabled; LocationPermission permission;
    try {
        serviceEnabled = await Geolocator.isLocationServiceEnabled();
        if (!serviceEnabled) { _updateStatus('Location services are disabled. Please enable GPS.'); return null; }
        permission = await Geolocator.checkPermission();
        if (permission == LocationPermission.denied) {
          permission = await Geolocator.requestPermission();
          if (permission == LocationPermission.denied) { _updateStatus('Location permissions denied.'); return null; }
        }
        if (permission == LocationPermission.deniedForever) { _updateStatus('Location permissions permanently denied. Please enable in settings.'); return null; }
        return await Geolocator.getCurrentPosition( desiredAccuracy: LocationAccuracy.high, timeLimit: const Duration(seconds: 15) );
    } on TimeoutException { _updateStatus('Failed to get location: Timed out.'); return null; }
    catch (e) { _updateStatus('Failed to get location: ${e.toString()}'); return null; }
  }

  // --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Geofence (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°) ---
  Future<void> _verifyLocation() async {
    if (!mounted) return;
    setState(() { _isVerifyingLocation = true; _statusMessage = 'Getting your location...'; _isInGeofence = null; _currentPosition = null; });
    Position? position;
    try {
      position = await _getCurrentLocation();
      if (position == null || !mounted) { setState(() => _isVerifyingLocation = false); return; }
      if (!mounted) return; 
      setState(() { _statusMessage = 'Location found. Checking authorized zone...'; _currentPosition = position; });
      final response = await http.get(
        Uri.parse('$apiUrl/check-geofence?latitude=${position.latitude}&longitude=${position.longitude}'),
        headers: { 'Authorization': 'Bearer ${widget.token}', },
      ).timeout(const Duration(seconds: 15));
      if (!mounted) return;
      if (response.statusCode == 200) {
        final data = jsonDecode(response.body); final bool isInZone = data['isInGeofence'] ?? false;
        setState(() { _isInGeofence = isInZone; _statusMessage = isInZone ? '‚úÖ You are within an authorized zone. Ready to check-in.' : '‚ùå You are outside authorized check-in zones.'; });
      } else {
        final errorMsg = jsonDecode(response.body)['error'] ?? 'Server error ${response.statusCode}';
        setState(() { _isInGeofence = false; _statusMessage = '‚ùå Failed to verify zone: $errorMsg'; });
      }
    } on TimeoutException { if (mounted) { setState(() { _isInGeofence = false; _statusMessage = '‚ùå Failed to verify zone: Request timed out.'; }); } }
    catch (e) { if (mounted && !_statusMessage.startsWith('‚ùå')) { setState(() { _isInGeofence = false; _statusMessage = '‚ùå Error verifying location: ${e.toString()}'; }); } }
    finally { if (mounted) { setState(() => _isVerifyingLocation = false); } }
  }

  // --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°) ---
  Future<void> _takePicture() async {
     if (!mounted) return; 
     setState(() { _statusMessage = 'Opening secure camera...'; _imageFile = null; });
     
     try {
        final dynamic photo = await Navigator.push(
          context,
          MaterialPageRoute(
            builder: (context) => const CheckInCameraPage(),
          ),
        );
        
        if (!mounted) return;
        
        if (photo != null && photo is XFile) { 
          // ‚≠êÔ∏è 3. ‡∏ñ‡πâ‡∏≤‡∏£‡∏π‡∏õ‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô null (‡∏ú‡πà‡∏≤‡∏ô Liveness) ‡∏Å‡πá‡πÄ‡∏£‡∏µ‡∏¢‡∏Å check-in ‡∏ï‡∏≤‡∏°‡∏õ‡∏Å‡∏ï‡∏¥
          _checkInWithPicture(File(photo.path)); 
        } else { 
          // ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏î‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
          setState(() { 
            _statusMessage = 'Liveness check cancelled. Please verify location again.'; 
            _isInGeofence = null; // ‚≠êÔ∏è ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
          }); 
        }
    } catch (e) { 
      print("Error opening secure camera: $e"); 
      if (mounted) { 
        setState(() { 
          _statusMessage = 'Error opening secure camera: ${e.toString()}'; 
          _isInGeofence = null; 
        }); 
      } 
    }
  }


  // --- ‚≠êÔ∏è [‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Check-in ‡∏à‡∏£‡∏¥‡∏á (‡πÄ‡∏û‡∏¥‡πà‡∏° subject_id) ‚≠êÔ∏è ---
  Future<void> _checkInWithPicture(File imageFile) async {
    // ‚≠êÔ∏è ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏ß‡∏¥‡∏ä‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
    if (_selectedSubject == null) {
      _updateStatus('‚ùå No subject selected. Please go back and select a subject.');
      return;
    }
    if (_currentPosition == null) { _updateStatus('‚ùå Location not verified. Please verify location first.'); return; }
    if (!mounted) return; 
    
    setState(() { _isCheckingIn = true; _statusMessage = 'Sending check-in data...'; _imageFile = imageFile; });
    
    try {
      final position = _currentPosition!;
      var request = http.MultipartRequest('POST', Uri.parse('$apiUrl/check-in'));
      request.headers['Authorization'] = 'Bearer ${widget.token}';
      
      // ‚≠êÔ∏è ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• 4 ‡∏≠‡∏¢‡πà‡∏≤‡∏á: ‡∏£‡∏π‡∏õ, lat, long, ‡πÅ‡∏•‡∏∞ subject_id
      request.files.add(await http.MultipartFile.fromPath('image', imageFile.path));
      request.fields['latitude'] = position.latitude.toString(); 
      request.fields['longitude'] = position.longitude.toString();
      request.fields['subject_id'] = _selectedSubject!.id.toString(); // ‚≠êÔ∏è‚≠êÔ∏è ‡∏™‡πà‡∏á ID ‡∏ß‡∏¥‡∏ä‡∏≤‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢
      
      var streamedResponse = await request.send().timeout(const Duration(seconds: 30));
       if (!mounted) return; 
       var response = await http.Response.fromStream(streamedResponse); 
       if (!mounted) return;

      if (response.statusCode == 200) { 
        setState(() { 
          _statusMessage = '‚úÖ Check-in successful for ${_selectedSubject!.code}!'; 
          // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ location ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏ß‡∏¥‡∏ä‡∏≤
          _isInGeofence = null; _currentPosition = null; _imageFile = null; 
        }); 
      }
      else { 
        final errorMsg = jsonDecode(response.body)['error'] ?? 'Unknown error ${response.statusCode}'; 
        setState(() { 
          _statusMessage = '‚ùå Check-in failed: $errorMsg'; 
          _isInGeofence = null; _currentPosition = null; _imageFile = null; 
        }); 
      }
    } on TimeoutException { if (mounted) { setState(() { _statusMessage = '‚ùå Check-in failed: Request timed out.'; _isInGeofence = null; _currentPosition = null; _imageFile = null; }); } }
    catch (e) { if (mounted) { setState(() => { _statusMessage = '‚ùå Check-in failed: ${e.toString()}', _isInGeofence = null, _currentPosition = null, _imageFile = null }); } }
    finally { if (mounted) { setState(() { _isCheckingIn = false; }); } }
  }

  // --- ‚≠êÔ∏è [‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Update Status (‡πÑ‡∏°‡πà‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï _selectedSubject) ‚≠êÔ∏è ---
  void _updateStatus(String status) {
      if (mounted) { 
        setState(() { 
          _statusMessage = status; 
          _isCheckingIn = false; 
          _isVerifyingLocation = false; 
          _isInGeofence = null; 
          _currentPosition = null; 
          _imageFile = null; 
          // _selectedSubject ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï
        }); 
      }
  }


  // --- ‚≠êÔ∏è [Build Method] ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‚≠êÔ∏è ---
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar( 
        // ‚≠êÔ∏è ‡πÅ‡∏™‡∏î‡∏á Title ‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ ‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏∏‡πà‡∏° Back
        title: Text(_selectedSubject == null ? 'Select Subject' : 'Check-in: ${_selectedSubject!.code}'), 
        leading: _selectedSubject != null 
          ? IconButton(
              icon: const Icon(Icons.arrow_back), 
              onPressed: _resetToSubjectSelection, // ‚≠êÔ∏è ‡∏Å‡∏î‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏¥‡∏ä‡∏≤
              tooltip: 'Change Subject',
            ) 
          : null,
        actions: [ 
          IconButton(icon: const Icon(Icons.logout), onPressed: widget.onLogout, tooltip: 'Logout'), 
        ], 
      ),
      // ‚≠êÔ∏è Body ‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
      body: _buildBody(),
    );
  }

  // ‚≠êÔ∏è [Widget ‡πÉ‡∏´‡∏°‡πà] ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Ç‡∏≠‡∏á Body
  Widget _buildBody() {
    if (_isLoadingSubjects) {
      // 1. ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏ß‡∏¥‡∏ä‡∏≤
      return const Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            CircularProgressIndicator(),
            SizedBox(height: 16),
            Text('Loading your subjects...'),
          ],
        ),
      );
    }
    
    if (_subjectErrorMessage != null) {
      // 2. ‡πÇ‡∏´‡∏•‡∏î‡∏ß‡∏¥‡∏ä‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
      return Center(
        child: Padding(
          padding: const EdgeInsets.all(20.0),
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              Text(_subjectErrorMessage!, style: const TextStyle(color: Colors.red, fontSize: 16), textAlign: TextAlign.center,),
              const SizedBox(height: 20),
              ElevatedButton.icon(
                onPressed: _fetchSubjects, 
                icon: const Icon(Icons.refresh), 
                label: const Text('Retry'),
              ),
            ],
          ),
        ),
      );
    }

    if (_selectedSubject == null) {
      // 3. ‚≠êÔ∏è ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏ß‡∏¥‡∏ä‡∏≤ (‡πÅ‡∏™‡∏î‡∏á Card)
      return _buildSubjectSelection();
    } else {
      // 4. ‚≠êÔ∏è ‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏¥‡∏ô (Verify Location + Camera)
      return _buildCheckInProcess();
    }
  }

  // ‚≠êÔ∏è [Widget ‡πÉ‡∏´‡∏°‡πà] ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á Card ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏ß‡∏¥‡∏ä‡∏≤
  Widget _buildSubjectSelection() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.stretch,
      children: [
        Padding(
          padding: const EdgeInsets.all(16.0),
          child: Text(
            'Welcome, ${widget.fullName}!',
            style: const TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
            textAlign: TextAlign.center,
          ),
        ),
        const Padding(
          padding: EdgeInsets.fromLTRB(16.0, 0, 16.0, 10.0),
          child: Text(
            'Please select your subject to check-in:',
            style: TextStyle(fontSize: 16),
            textAlign: TextAlign.center,
          ),
        ),
        Expanded(
          child: _subjects.isEmpty
            // ‚≠êÔ∏è‚≠êÔ∏è ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° ‡∏ñ‡πâ‡∏≤ Server ‡∏Å‡∏£‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß‡πÑ‡∏°‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ß‡∏¥‡∏ä‡∏≤
            ? const Center(child: Padding(
                padding: EdgeInsets.all(20.0),
                child: Text(
                  'You are not enrolled in any active subjects.\nPlease contact your administrator.',
                  textAlign: TextAlign.center,
                  style: TextStyle(fontSize: 16),
                ),
              ))
            : ListView.builder(
                padding: const EdgeInsets.symmetric(horizontal: 10.0),
                itemCount: _subjects.length,
                itemBuilder: (context, index) {
                  final subject = _subjects[index];
                  return Card(
                    elevation: 3,
                    margin: const EdgeInsets.symmetric(vertical: 6.0),
                    child: ListTile(
                      leading: const Icon(Icons.class_, color: Colors.blueAccent),
                      title: Text(subject.name, style: const TextStyle(fontWeight: FontWeight.bold)),
                      subtitle: Text(subject.code),
                      trailing: const Icon(Icons.arrow_forward_ios_rounded),
                      onTap: () => _onSubjectSelected(subject),
                    ),
                  );
                },
              ),
        ),
      ],
    );
  }

  // ‚≠êÔ∏è [Widget ‡πÉ‡∏´‡∏°‡πà] ‡∏¢‡πâ‡∏≤‡∏¢‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡πà‡∏ß‡∏ô‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏¥‡∏ô‡πÄ‡∏î‡∏¥‡∏°‡∏°‡∏≤‡πÑ‡∏ß‡πâ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà
  Widget _buildCheckInProcess() {
    return Center( 
      child: Padding( 
        padding: const EdgeInsets.all(16.0), 
        child: Column( 
          mainAxisAlignment: MainAxisAlignment.center, 
          children: <Widget>[
            // ‚≠êÔ∏è ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏¥‡∏ô‡∏ß‡∏¥‡∏ä‡∏≤‡∏≠‡∏∞‡πÑ‡∏£
            Text( 
              'Checking in for: ${_selectedSubject!.name}', 
              style: const TextStyle(fontSize: 18, fontWeight: FontWeight.bold), 
              textAlign: TextAlign.center, 
            ),
            const SizedBox(height: 30),
            
            // ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏π‡∏õ Preview ‡∏ñ‡πâ‡∏≤‡∏ñ‡πà‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏•‡∏∞‡∏Å‡∏≥‡∏•‡∏±‡∏á check-in
            if (_imageFile != null && _isCheckingIn) ...[ 
              Image.file(_imageFile!, height: 150, width: 150, fit: BoxFit.cover), 
              const SizedBox(height: 15), 
            ],
            
            // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
            Text( 
              _statusMessage, 
              style: TextStyle( 
                fontSize: 16, 
                color: _statusMessage.startsWith('‚ùå') ? Colors.red : (_statusMessage.startsWith('‚úÖ') ? Colors.green : Colors.black), 
              ), 
              textAlign: TextAlign.center, 
            ),
            const SizedBox(height: 30),
            
            // ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
            if (_isVerifyingLocation || _isCheckingIn)
              const CircularProgressIndicator() // ‡πÅ‡∏™‡∏î‡∏á Loading
            else if (_isInGeofence == true)
              // ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÇ‡∏ã‡∏ô -> ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏∏‡πà‡∏° Check-in (‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á)
              ElevatedButton.icon( 
                onPressed: _takePicture, 
                icon: const Icon(Icons.camera_alt), 
                label: const Text('Check-in Now'), 
                style: ElevatedButton.styleFrom( padding: const EdgeInsets.symmetric(horizontal: 30, vertical: 15), textStyle: const TextStyle(fontSize: 18), ), 
              )
            else
              // ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏ä‡πá‡∏Ñ ‡∏´‡∏£‡∏∑‡∏≠ ‡∏≠‡∏¢‡∏π‡πà‡∏ô‡∏≠‡∏Å‡πÇ‡∏ã‡∏ô -> ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏∏‡πà‡∏° Verify Location
              ElevatedButton.icon( 
                onPressed: _verifyLocation, 
                icon: const Icon(Icons.location_searching), 
                label: const Text('Verify Location'), 
                style: ElevatedButton.styleFrom( padding: const EdgeInsets.symmetric(horizontal: 30, vertical: 15), textStyle: const TextStyle(fontSize: 18), ), 
              ),
          ], 
        ), 
      ), 
    );
  }

} // End of _SubjectSelectionPageState