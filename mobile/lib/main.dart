// File: mobile/lib/main.dart
// (‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Liveness Check Camera)

import 'dart:convert';
import 'dart:io';
import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'package:image_picker/image_picker.dart'; // ‡∏¢‡∏±‡∏á‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ
import 'package:geolocator/geolocator.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:mobile/RegisterFacePage.dart'; // Ensure this file exists
import 'dart:async'; // Import for Timer/TimeoutException

// ‚≠êÔ∏è‚≠êÔ∏è Import ‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á ‚≠êÔ∏è‚≠êÔ∏è
import 'package:camera/camera.dart'; 
import 'package:mobile/CheckInCameraPage.dart'; 

// ‚≠êÔ∏è URL ‡∏Ç‡∏≠‡∏á API Service (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Emulator/Device ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì)
// const String apiUrl = 'http://10.0.2.2:8000'; // For Android Emulator
const String apiUrl = 'http://192.168.1.37:8000'; // üëà ** ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç IP ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ!! ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô IP ‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì **

void main() {
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Face Attendance',
      theme: ThemeData(primarySwatch: Colors.blue),
      home: const AuthWrapper(),
    );
  }
}

// AuthWrapper (Handles login state and face registration status)
class AuthWrapper extends StatefulWidget {
  const AuthWrapper({super.key});
  @override
  State<AuthWrapper> createState() => _AuthWrapperState();
}
class _AuthWrapperState extends State<AuthWrapper> {
  String? _token; String? _username; String? _fullName; bool _isFaceRegistered = false;
  @override void initState() { super.initState(); _checkLoginStatus(); }
  Future<void> _checkLoginStatus() async {
    final prefs = await SharedPreferences.getInstance();
    if (!mounted) return;
    setState(() { _token = prefs.getString('user_token'); _username = prefs.getString('username'); _fullName = prefs.getString('full_name'); _isFaceRegistered = prefs.getBool('isFaceRegistered') ?? false; });
  }
  void _onLoginSuccess(String token, String username, String fullName, bool isFaceRegistered) async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setString('user_token', token); await prefs.setString('username', username); await prefs.setString('full_name', fullName); await prefs.setBool('isFaceRegistered', isFaceRegistered);
    if (!mounted) return; setState(() { _token = token; _username = username; _fullName = fullName; _isFaceRegistered = isFaceRegistered; });
  }
  void _onFaceRegistrationSuccess() async {
    final prefs = await SharedPreferences.getInstance(); await prefs.setBool('isFaceRegistered', true);
    if (!mounted) return; setState(() { _isFaceRegistered = true; });
  }
  void _onLogout() async {
    final prefs = await SharedPreferences.getInstance(); await prefs.clear();
    if (!mounted) return; setState(() { _token = null; _username = null; _fullName = null; _isFaceRegistered = false; });
  }
  @override Widget build(BuildContext context) {
    if (_token == null) { return LoginPage(onLoginSuccess: _onLoginSuccess); }
    else if (!_isFaceRegistered) { return RegisterFacePage( token: _token!, fullName: _fullName ?? "User", onRegistrationSuccess: _onFaceRegistrationSuccess, ); }
    else { return CheckInPage( token: _token!, username: _username ?? "user", fullName: _fullName ?? "User", onLogout: _onLogout, ); }
  }
}

// LoginPage (Gets isFaceRegistered from API)
class LoginPage extends StatefulWidget {
  final Function(String token, String username, String fullName, bool isFaceRegistered) onLoginSuccess;
  const LoginPage({super.key, required this.onLoginSuccess});
  @override State<LoginPage> createState() => _LoginPageState();
}
class _LoginPageState extends State<LoginPage> {
  final TextEditingController _usernameController = TextEditingController(); final TextEditingController _passwordController = TextEditingController(); String _message = ''; bool _isLoading = false;
  Future<void> _login() async { if (!mounted) return; setState(() { _isLoading = true; _message = ''; }); try {
      final response = await http.post( Uri.parse('$apiUrl/login'), headers: {'Content-Type': 'application/json'}, body: jsonEncode({ 'username': _usernameController.text, 'password': _passwordController.text, }), ).timeout(const Duration(seconds: 15));
      if (!mounted) return; if (response.statusCode == 200) { final data = jsonDecode(response.body); final bool isFaceRegistered = data['user']?['isFaceRegistered'] ?? false; final String fullName = data['user']?['fullName'] ?? _usernameController.text; widget.onLoginSuccess( data['token'], _usernameController.text, fullName, isFaceRegistered, ); }
      else { final errorBody = jsonDecode(response.body); setState(() { _message = 'Login failed: ${errorBody['error'] ?? 'Status code ${response.statusCode}'}'; }); }
    } on TimeoutException { if (mounted) { setState(() { _message = 'Login failed: Connection timed out.'; _isLoading = false; }); } }
    catch (e) { if (mounted) { setState(() { _message = 'Login failed: ${e.toString()}'; _isLoading = false; }); } }
    finally { if (mounted && _isLoading) { setState(() { _isLoading = false; }); } }
  }
  @override Widget build(BuildContext context) { return Scaffold( appBar: AppBar(title: const Text('User Login')), body: Padding( padding: const EdgeInsets.all(16.0), child: Column( mainAxisAlignment: MainAxisAlignment.center, children: [ TextField( controller: _usernameController, decoration: const InputDecoration(labelText: 'Username'), keyboardType: TextInputType.text, autocorrect: false, ), TextField( controller: _passwordController, decoration: const InputDecoration(labelText: 'Password'), obscureText: true, keyboardType: TextInputType.visiblePassword, autocorrect: false, ), const SizedBox(height: 20), _isLoading ? const CircularProgressIndicator() : ElevatedButton( onPressed: _login, child: const Text('Login'), ), const SizedBox(height: 10), if (_message.isNotEmpty) Text(_message, style: const TextStyle(color: Colors.red)), ], ), ), ); }
}

// CheckInPage (‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Geofence ‡∏Å‡πà‡∏≠‡∏ô)
class CheckInPage extends StatefulWidget {
  final String token; final String username; final String fullName; final VoidCallback onLogout;
  const CheckInPage({ super.key, required this.token, required this.username, required this.fullName, required this.onLogout, });
  @override State<CheckInPage> createState() => _CheckInPageState();
}

class _CheckInPageState extends State<CheckInPage> {
  bool _isCheckingIn = false; File? _imageFile; 
  // final ImagePicker _picker = ImagePicker(); // ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ picker ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á‡πÅ‡∏•‡πâ‡∏ß

  // -- ‚≠êÔ∏è State ‡πÉ‡∏´‡∏°‡πà ‚≠êÔ∏è --
  String _statusMessage = 'Please verify your location first'; // ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
  bool _isVerifyingLocation = false; // ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á?
  bool? _isInGeofence; // ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á (null=‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡πá‡∏Ñ, true=‡∏≠‡∏¢‡∏π‡πà, false=‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏π‡πà)
  Position? _currentPosition; // ‡πÄ‡∏Å‡πá‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡πà‡∏≤‡∏ô

  // --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏° ‡πÅ‡∏ï‡πà‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ null ‡∏ñ‡πâ‡∏≤ error) ---
  Future<Position?> _getCurrentLocation() async {
    bool serviceEnabled; LocationPermission permission;
    try {
        serviceEnabled = await Geolocator.isLocationServiceEnabled();
        if (!serviceEnabled) { _updateStatus('Location services are disabled. Please enable GPS.'); return null; }
        permission = await Geolocator.checkPermission();
        if (permission == LocationPermission.denied) {
          permission = await Geolocator.requestPermission();
          if (permission == LocationPermission.denied) { _updateStatus('Location permissions denied.'); return null; }
        }
        if (permission == LocationPermission.deniedForever) { _updateStatus('Location permissions permanently denied. Please enable in settings.'); return null; }
        return await Geolocator.getCurrentPosition( desiredAccuracy: LocationAccuracy.high, timeLimit: const Duration(seconds: 15) );
    } on TimeoutException { _updateStatus('Failed to get location: Timed out.'); return null; }
    catch (e) { _updateStatus('Failed to get location: ${e.toString()}'); return null; }
  }

  // --- ‚≠êÔ∏è ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Geofence ‚≠êÔ∏è --- (‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏î‡∏¥‡∏°)
  Future<void> _verifyLocation() async {
    if (!mounted) return;
    setState(() { _isVerifyingLocation = true; _statusMessage = 'Getting your location...'; _isInGeofence = null; _currentPosition = null; });
    Position? position;
    try {
      position = await _getCurrentLocation();
      if (position == null || !mounted) { setState(() => _isVerifyingLocation = false); return; }
      if (!mounted) return; // Check again
      setState(() { _statusMessage = 'Location found. Checking authorized zone...'; _currentPosition = position; });
      final response = await http.get(
        Uri.parse('$apiUrl/check-geofence?latitude=${position.latitude}&longitude=${position.longitude}'),
        headers: { 'Authorization': 'Bearer ${widget.token}', },
      ).timeout(const Duration(seconds: 15));
      if (!mounted) return;
      if (response.statusCode == 200) {
        final data = jsonDecode(response.body); final bool isInZone = data['isInGeofence'] ?? false;
        setState(() { _isInGeofence = isInZone; _statusMessage = isInZone ? '‚úÖ You are within an authorized zone. Ready to check-in.' : '‚ùå You are outside authorized check-in zones.'; });
      } else {
        final errorMsg = jsonDecode(response.body)['error'] ?? 'Server error ${response.statusCode}';
        setState(() { _isInGeofence = false; _statusMessage = '‚ùå Failed to verify zone: $errorMsg'; });
      }
    } on TimeoutException { if (mounted) { setState(() { _isInGeofence = false; _statusMessage = '‚ùå Failed to verify zone: Request timed out.'; }); } }
    catch (e) { if (mounted && !_statusMessage.startsWith('‚ùå')) { setState(() { _isInGeofence = false; _statusMessage = '‚ùå Error verifying location: ${e.toString()}'; }); } }
    finally { if (mounted) { setState(() => _isVerifyingLocation = false); } }
  }

  // --- ‚≠êÔ∏è‚≠êÔ∏è ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç) ‚≠êÔ∏è‚≠êÔ∏è ---
  // (‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ ImagePicker ‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏´‡∏ô‡πâ‡∏≤ Liveness Check)
  Future<void> _takePicture() async {
     if (!mounted) return; 
     setState(() { _statusMessage = 'Opening secure camera...'; _imageFile = null; });
     
     try {
        // ‚≠êÔ∏è‚≠êÔ∏è 1. ‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤ CheckInCameraPage ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô
        // ‡πÄ‡∏£‡∏≤‡πÉ‡∏ä‡πâ "dynamic" ‡∏´‡∏£‡∏∑‡∏≠ "XFile?" ‡∏Å‡πá‡πÑ‡∏î‡πâ
        final dynamic photo = await Navigator.push(
          context,
          MaterialPageRoute(
            builder: (context) => const CheckInCameraPage(),
          ),
        );
        
        if (!mounted) return;
        
        // 2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏î‡πâ‡∏£‡∏π‡∏õ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡∏ñ‡πâ‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏î‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å photo ‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô null)
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Type ‡∏î‡πâ‡∏ß‡∏¢‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô XFile
        if (photo != null && photo is XFile) { 
          // ‚≠êÔ∏è 3. ‡∏ñ‡πâ‡∏≤‡∏£‡∏π‡∏õ‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô null (‡∏ú‡πà‡∏≤‡∏ô Liveness) ‡∏Å‡πá‡πÄ‡∏£‡∏µ‡∏¢‡∏Å check-in ‡∏ï‡∏≤‡∏°‡∏õ‡∏Å‡∏ï‡∏¥
          _checkInWithPicture(File(photo.path)); 
        } else { 
          // ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏î‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
          setState(() { 
            _statusMessage = 'Liveness check cancelled. Please verify location again.'; 
            _isInGeofence = null; // ‚≠êÔ∏è ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
          }); 
        }
    } catch (e) { 
      print("Error opening secure camera: $e"); 
      if (mounted) { 
        setState(() { 
          _statusMessage = 'Error opening secure camera: ${e.toString()}'; 
          _isInGeofence = null; 
        }); 
      } 
    }
  }


  // --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Check-in ‡∏à‡∏£‡∏¥‡∏á (‡πÉ‡∏ä‡πâ _currentPosition) --- (‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏î‡∏¥‡∏°)
  Future<void> _checkInWithPicture(File imageFile) async {
    if (_currentPosition == null) { _updateStatus('‚ùå Location not verified. Please verify location first.'); return; }
    if (!mounted) return; setState(() { _isCheckingIn = true; _statusMessage = 'Sending check-in data...'; _imageFile = imageFile; });
    try {
      final position = _currentPosition!;
      var request = http.MultipartRequest('POST', Uri.parse('$apiUrl/check-in'));
      request.headers['Authorization'] = 'Bearer ${widget.token}';
      request.files.add(await http.MultipartFile.fromPath('image', imageFile.path));
      request.fields['latitude'] = position.latitude.toString(); request.fields['longitude'] = position.longitude.toString();
      var streamedResponse = await request.send().timeout(const Duration(seconds: 30));
       if (!mounted) return; var response = await http.Response.fromStream(streamedResponse); if (!mounted) return;
      if (response.statusCode == 200) { setState(() { _statusMessage = '‚úÖ Check-in successful!'; _isInGeofence = null; _currentPosition = null; _imageFile = null; }); }
      else { final errorMsg = jsonDecode(response.body)['error'] ?? 'Unknown error ${response.statusCode}'; setState(() { _statusMessage = '‚ùå Check-in failed: $errorMsg'; _isInGeofence = null; _currentPosition = null; _imageFile = null; }); }
    } on TimeoutException { if (mounted) { setState(() { _statusMessage = '‚ùå Check-in failed: Request timed out.'; _isInGeofence = null; _currentPosition = null; _imageFile = null; }); } }
    catch (e) { if (mounted) { setState(() => { _statusMessage = '‚ùå Check-in failed: ${e.toString()}', _isInGeofence = null, _currentPosition = null, _imageFile = null }); } }
    finally { if (mounted) { setState(() { _isCheckingIn = false; /* _imageFile cleared above */ }); } }
  }

  // --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Update Status --- (‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏î‡∏¥‡∏°)
  void _updateStatus(String status) {
      if (mounted) { setState(() { _statusMessage = status; _isCheckingIn = false; _isVerifyingLocation = false; _isInGeofence = null; _currentPosition = null; _imageFile = null; }); }
  }

  @override
  Widget build(BuildContext context) { // (‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏î‡∏¥‡∏°)
    return Scaffold(
      appBar: AppBar( title: const Text('Face Attendance Check-in'), actions: [ IconButton(icon: const Icon(Icons.logout), onPressed: widget.onLogout, tooltip: 'Logout'), ], ),
      body: Center( child: Padding( padding: const EdgeInsets.all(16.0), child: Column( mainAxisAlignment: MainAxisAlignment.center, children: <Widget>[
            Text( 'Welcome, ${widget.fullName} (${widget.username})!', style: const TextStyle(fontSize: 18, fontWeight: FontWeight.bold), textAlign: TextAlign.center, ),
            const SizedBox(height: 30),
            // ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏π‡∏õ Preview ‡∏ñ‡πâ‡∏≤‡∏ñ‡πà‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏•‡∏∞‡∏Å‡∏≥‡∏•‡∏±‡∏á check-in
            if (_imageFile != null && _isCheckingIn) ...[ Image.file(_imageFile!, height: 150, width: 150, fit: BoxFit.cover), const SizedBox(height: 15), ],
            // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
            Text( _statusMessage, style: TextStyle( fontSize: 16, color: _statusMessage.startsWith('‚ùå') ? Colors.red : (_statusMessage.startsWith('‚úÖ') ? Colors.green : Colors.black), ), textAlign: TextAlign.center, ),
            const SizedBox(height: 30),
            // ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
            if (_isVerifyingLocation || _isCheckingIn)
              const CircularProgressIndicator() // ‡πÅ‡∏™‡∏î‡∏á Loading
            else if (_isInGeofence == true)
              // ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÇ‡∏ã‡∏ô -> ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏∏‡πà‡∏° Check-in (‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á)
              ElevatedButton.icon( onPressed: _takePicture, icon: const Icon(Icons.camera_alt), label: const Text('Check-in Now'), style: ElevatedButton.styleFrom( padding: const EdgeInsets.symmetric(horizontal: 30, vertical: 15), textStyle: const TextStyle(fontSize: 18), ), )
            else
              // ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏ä‡πá‡∏Ñ ‡∏´‡∏£‡∏∑‡∏≠ ‡∏≠‡∏¢‡∏π‡πà‡∏ô‡∏≠‡∏Å‡πÇ‡∏ã‡∏ô -> ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏∏‡πà‡∏° Verify Location
              ElevatedButton.icon( onPressed: _verifyLocation, icon: const Icon(Icons.location_searching), label: const Text('Verify Location'), style: ElevatedButton.styleFrom( padding: const EdgeInsets.symmetric(horizontal: 30, vertical: 15), textStyle: const TextStyle(fontSize: 18), ), ),
          ], ), ), ),
    );
  }
} // End of _CheckInPageState