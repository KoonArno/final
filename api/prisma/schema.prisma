// File: api/prisma/schema.prisma
// (เวอร์ชันอัปเดต: เพิ่มความสัมพันธ์ m-n ระหว่าง users กับ subjects)

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model admins {
  admin_id            Int         @id @default(autoincrement())
  email               String      @unique @db.VarChar(100)
  password_hash       String      @db.VarChar(255)
  full_name           String?     @db.VarChar(100)
  created_at          DateTime?   @default(now()) @db.Timestamptz(3)
  // Relations
  users               users[]
  geofences           geofences[]

  @@map("admins")
}

model attendance_logs {
  log_id              Int       @id @default(autoincrement())
  user_id             Int
  subject_id          Int?      // ID ของวิชาที่เช็คอิน

  check_in_time       DateTime? @default(now()) @db.Timestamptz(3)
  latitude            Float?    @db.DoublePrecision
  longitude           Float?    @db.DoublePrecision
  is_in_geofence      Boolean?
  face_match_distance Float?    @db.DoublePrecision
  image_url           String?   @db.VarChar(255)
  
  // Relations
  subjects            subjects? @relation(fields: [subject_id], references: [subject_id], onDelete: SetNull)
  users               users     @relation(fields: [user_id], references: [user_id], onDelete: Cascade, map: "attendance_logs_user_id_fkey") 

  @@index([user_id, check_in_time(sort: Desc)], map: "idx_attendance_user_time")
  @@index([is_in_geofence], map: "idx_attendance_is_in_geofence")
  @@index([subject_id], map: "idx_attendance_subject_id")
  @@map("attendance_logs")
}

model geofences {
  geofence_id         Int       @id @default(autoincrement())
  name                String    @db.VarChar(100)
  description         String?   @db.Text
  center_latitude     Float     @db.DoublePrecision
  center_longitude    Float     @db.DoublePrecision
  radius_meters       Float     @db.DoublePrecision
  is_active           Boolean?  @default(true)
  created_at          DateTime? @default(now()) @db.Timestamptz(3)
  created_by_admin_id Int?
  // Relations
  admins              admins?   @relation(fields: [created_by_admin_id], references: [admin_id], onDelete: SetNull, map: "geofences_created_by_admin_id_fkey")

  @@index([is_active], map: "idx_geofences_active")
  @@index([center_latitude, center_longitude], map: "idx_geofences_latlng")
  @@map("geofences")
}

model subjects {
  subject_id    Int       @id @default(autoincrement())
  code          String    @unique @db.VarChar(50) // รหัสวิชา เช่น CS101
  name          String    @db.VarChar(150) // ชื่อวิชา
  description   String?   @db.Text
  is_active     Boolean?  @default(true)
  created_at    DateTime? @default(now()) @db.Timestamptz(3)

  // Relation: 1 วิชามีได้หลาย Log การเข้าเรียน
  attendance_logs attendance_logs[]

  // --- ⭐️⭐️ [เพิ่ม] ความสัมพันธ์ m-n กับ users ⭐️⭐️ ---
  users           users[]   @relation("UserSubjects")

  @@map("subjects")
}

model users {
  user_id               Int       @id @default(autoincrement())
  username              String    @unique @db.VarChar(50)
  password_hash         String    @db.VarChar(255)
  full_name             String    @db.VarChar(100)
  face_embedding        String?   @db.Text
  is_active             Boolean?  @default(true)
  created_at            DateTime? @default(now()) @db.Timestamptz(3)
  created_by_admin_id   Int?
  
  // Relations
  admins                admins?   @relation(fields: [created_by_admin_id], references: [admin_id], onDelete: SetNull, map: "users_created_by_admin_id_fkey")
  attendance_logs       attendance_logs[]

  // --- ⭐️⭐️ [เพิ่ม] ความสัมพันธ์ m-n กับ subjects ⭐️⭐️ ---
  subjects              subjects[] @relation("UserSubjects")

  @@index([is_active], map: "idx_users_is_active")
  @@map("users")
}